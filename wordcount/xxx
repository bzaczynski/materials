XXX
ExceptionChainRepr(reprtraceback=ReprTraceback(reprentries=[ReprEntry(lines=['    @classmethod', '    def from_call(', '        cls,', '  
func: Callable[[], TResult],', '        when: Literal["collect", "setup", "call", "teardown"],', '        reraise: type[BaseException] | 
tuple[type[BaseException], ...] | None = None,', '    ) -> CallInfo[TResult]:', '        """Call func, wrapping the result in a 
CallInfo.', '    ', '        :param func:', '            The function to call. Called without arguments.', '        :type func: 
Callable[[], _pytest.runner.TResult]', '        :param when:', '            The phase in which the function is called.', '        :param 
reraise:', '            Exception or exceptions that shall propagate if raised by the', '            function, instead of being wrapped in
the CallInfo.', '        """', '        excinfo = None', '        start = timing.time()', '        precise_start = timing.perf_counter()',
'        try:', '>           result: TResult | None = func()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/runner.py', lineno=341, 
message=''), style='long'), ReprEntry(lines=['>       lambda: runtest_hook(item=item, **kwds), when=when, reraise=reraise', '    )'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/runner.py', lineno=242, 
message=''), style='long'), ReprEntry(lines=['    def __call__(self, **kwargs: object) -> Any:', '        """Call the hook.', '    ', '   
Only accepts keyword arguments, which should match the hook', '        specification.', '    ', '        Returns the result(s) of calling 
all registered plugins, see', '        :ref:`calling`.', '        """', '        assert (', '            not self.is_historic()', '       
), "Cannot directly call a historic hook - use call_historic instead."', '        self._verify_all_args_are_provided(kwargs)', '        
firstresult = self.spec.opts.get("firstresult", False) if self.spec else False', '        # Copy because plugins may register other 
plugins during iteration (#438).', '>       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_hooks.py', lineno=513, 
message=''), style='long'), ReprEntry(lines=['    def _hookexec(', '        self,', '        hook_name: str,', '        methods: 
Sequence[HookImpl],', '        kwargs: Mapping,', '        firstresult: bool,', '    ) -> object | list:', '        # called from all 
hookcaller instances.', '        # enable_tracing will set its own wrapping function at self._inner_hookexec', '>       return 
self._inner_hookexec(hook_name, methods, kwargs, firstresult)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_manager.py', lineno=120, 
message=''), style='long'), ReprEntry(lines=['    @pytest.hookimpl(wrapper=True, tryfirst=True)', '    def pytest_runtest_call() -> 
Generator[None]:', '>       yield from thread_exception_runtest_hook()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/threadexception.py', lineno=92, 
message=''), style='long'), ReprEntry(lines=['    def thread_exception_runtest_hook() -> Generator[None]:', '        with 
catch_threading_exception() as cm:', '            try:', '>               yield'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/threadexception.py', lineno=68, 
message=''), style='long'), ReprEntry(lines=['    @pytest.hookimpl(wrapper=True, tryfirst=True)', '    def pytest_runtest_call() -> 
Generator[None]:', '>       yield from unraisable_exception_runtest_hook()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/unraisableexception.py', 
lineno=95, message=''), style='long'), ReprEntry(lines=['    def unraisable_exception_runtest_hook() -> Generator[None]:', '        with 
catch_unraisable_exception() as cm:', '            try:', '>               yield'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/unraisableexception.py', 
lineno=70, message=''), style='long'), ReprEntry(lines=['    @hookimpl(wrapper=True)', '    def pytest_runtest_call(self, item: 
nodes.Item) -> Generator[None]:', '        self.log_cli_handler.set_when("call")', '    ', '>       yield from self._runtest_for(item, 
"call")'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/logging.py', lineno=846, 
message=''), style='long'), ReprEntry(lines=['    def _runtest_for(self, item: nodes.Item, when: str) -> Generator[None]:', '        
"""Implement the internals of the pytest_runtest_xxx() hooks."""', '        with catching_logs(', '            self.caplog_handler,', '   
level=self.log_level,', '        ) as caplog_handler, catching_logs(', '            self.report_handler,', '            
level=self.log_level,', '        ) as report_handler:', '            caplog_handler.reset()', '            report_handler.reset()', '     
item.stash = caplog_handler.records', '            item.stash = caplog_handler', '    ', '            try:', '>               yield'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/logging.py', lineno=829, 
message=''), style='long'), ReprEntry(lines=['    @hookimpl(wrapper=True)', '    def pytest_runtest_call(item: Item) -> Generator[None]:',
'        xfailed = item.stash.get(xfailed_key, None)', '        if xfailed is None:', '            item.stash = xfailed = 
evaluate_xfail_marks(item)', '    ', '        if xfailed and not item.config.option.runxfail and not xfailed.run:', '            
xfail("[NOTRUN] " + xfailed.reason)', '    ', '        try:', '>           return (yield)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/skipping.py', lineno=257, 
message=''), style='long'), ReprEntry(lines=['    def pytest_runtest_call(item: Item) -> None:', '        _update_current_test_var(item, 
"call")', '        try:', '            del sys.last_type', '            del sys.last_value', '            del sys.last_traceback', '      
if sys.version_info >= (3, 12, 0):', '                del sys.last_exc  # type:ignore', '        except AttributeError:', '            
pass', '        try:', '>           item.runtest()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/runner.py', lineno=174, 
message=''), style='long'), ReprEntry(lines=['    def runtest(self) -> None:', '        """Execute the underlying test function."""', '>  
self.ihook.pytest_pyfunc_call(pyfuncitem=self)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/python.py', lineno=1627, 
message=''), style='long'), ReprEntry(lines=['    def __call__(self, **kwargs: object) -> Any:', '        """Call the hook.', '    ', '   
Only accepts keyword arguments, which should match the hook', '        specification.', '    ', '        Returns the result(s) of calling 
all registered plugins, see', '        :ref:`calling`.', '        """', '        assert (', '            not self.is_historic()', '       
), "Cannot directly call a historic hook - use call_historic instead."', '        self._verify_all_args_are_provided(kwargs)', '        
firstresult = self.spec.opts.get("firstresult", False) if self.spec else False', '        # Copy because plugins may register other 
plugins during iteration (#438).', '>       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_hooks.py', lineno=513, 
message=''), style='long'), ReprEntry(lines=['    def _hookexec(', '        self,', '        hook_name: str,', '        methods: 
Sequence[HookImpl],', '        kwargs: Mapping,', '        firstresult: bool,', '    ) -> object | list:', '        # called from all 
hookcaller instances.', '        # enable_tracing will set its own wrapping function at self._inner_hookexec', '>       return 
self._inner_hookexec(hook_name, methods, kwargs, firstresult)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_manager.py', lineno=120, 
message=''), style='long'), ReprEntry(lines=['    @hookimpl(trylast=True)', '    def pytest_pyfunc_call(pyfuncitem: Function) -> object | 
None:', '        testfunction = pyfuncitem.obj', '        if is_async_function(testfunction):', '            
async_warn_and_skip(pyfuncitem.nodeid)', '        funcargs = pyfuncitem.funcargs', '        testargs = {arg: funcargs for arg in 
pyfuncitem._fixtureinfo.argnames}', '>       result = testfunction(**testargs)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/python.py', lineno=159, 
message=''), style='long'), ReprEntry(lines=['    def test_handles_a_short_word_without_trailing_newline(self, wc):', '>       
assert_equals_if(b"0 1 5\\n", wc(stdin=b"caffe"))'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='tests/task_02.py', lineno=14, message=''), style='long'), ReprEntry(lines=['    def 
assert_equals_if(expected, actual, message=None):', '        """Only show the expected vs. actual table on a truthy value."""', '        
if bool(actual):', '            assert_equals(expected, actual, message)', '        else:', '            if message:', '                
assert expected == actual, message', '            else:', '>               assert expected == actual', "E               AssertionError: 
assert b'0 1 5\\n' == b''", 'E                 ', 'E                 Use -v to get more diff'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='tests/realpython/assertions.py', lineno=17, message='AssertionError'), style='long')], extraline=None, 
style='long'), reprcrash=ReprFileLocation(path='/home/bartek/Git/materials-forked/wordcount/tests/realpython/assertions.py', lineno=17, 
message="AssertionError: assert b'0 1 5\\n' == b''\n  \n  Use -v to get more diff"), sections=[], 
chain=[(ReprTraceback(reprentries=[ReprEntry(lines=['    @classmethod', '    def from_call(', '        cls,', '        func: Callable[[], 
TResult],', '        when: Literal["collect", "setup", "call", "teardown"],', '        reraise: type[BaseException] | 
tuple[type[BaseException], ...] | None = None,', '    ) -> CallInfo[TResult]:', '        """Call func, wrapping the result in a 
CallInfo.', '    ', '        :param func:', '            The function to call. Called without arguments.', '        :type func: 
Callable[[], _pytest.runner.TResult]', '        :param when:', '            The phase in which the function is called.', '        :param 
reraise:', '            Exception or exceptions that shall propagate if raised by the', '            function, instead of being wrapped in
the CallInfo.', '        """', '        excinfo = None', '        start = timing.time()', '        precise_start = timing.perf_counter()',
'        try:', '>           result: TResult | None = func()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/runner.py', lineno=341, 
message=''), style='long'), ReprEntry(lines=['>       lambda: runtest_hook(item=item, **kwds), when=when, reraise=reraise', '    )'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/runner.py', lineno=242, 
message=''), style='long'), ReprEntry(lines=['    def __call__(self, **kwargs: object) -> Any:', '        """Call the hook.', '    ', '   
Only accepts keyword arguments, which should match the hook', '        specification.', '    ', '        Returns the result(s) of calling 
all registered plugins, see', '        :ref:`calling`.', '        """', '        assert (', '            not self.is_historic()', '       
), "Cannot directly call a historic hook - use call_historic instead."', '        self._verify_all_args_are_provided(kwargs)', '        
firstresult = self.spec.opts.get("firstresult", False) if self.spec else False', '        # Copy because plugins may register other 
plugins during iteration (#438).', '>       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_hooks.py', lineno=513, 
message=''), style='long'), ReprEntry(lines=['    def _hookexec(', '        self,', '        hook_name: str,', '        methods: 
Sequence[HookImpl],', '        kwargs: Mapping,', '        firstresult: bool,', '    ) -> object | list:', '        # called from all 
hookcaller instances.', '        # enable_tracing will set its own wrapping function at self._inner_hookexec', '>       return 
self._inner_hookexec(hook_name, methods, kwargs, firstresult)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_manager.py', lineno=120, 
message=''), style='long'), ReprEntry(lines=['    @pytest.hookimpl(wrapper=True, tryfirst=True)', '    def pytest_runtest_call() -> 
Generator[None]:', '>       yield from thread_exception_runtest_hook()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/threadexception.py', lineno=92, 
message=''), style='long'), ReprEntry(lines=['    def thread_exception_runtest_hook() -> Generator[None]:', '        with 
catch_threading_exception() as cm:', '            try:', '>               yield'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/threadexception.py', lineno=68, 
message=''), style='long'), ReprEntry(lines=['    @pytest.hookimpl(wrapper=True, tryfirst=True)', '    def pytest_runtest_call() -> 
Generator[None]:', '>       yield from unraisable_exception_runtest_hook()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/unraisableexception.py', 
lineno=95, message=''), style='long'), ReprEntry(lines=['    def unraisable_exception_runtest_hook() -> Generator[None]:', '        with 
catch_unraisable_exception() as cm:', '            try:', '>               yield'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/unraisableexception.py', 
lineno=70, message=''), style='long'), ReprEntry(lines=['    @hookimpl(wrapper=True)', '    def pytest_runtest_call(self, item: 
nodes.Item) -> Generator[None]:', '        self.log_cli_handler.set_when("call")', '    ', '>       yield from self._runtest_for(item, 
"call")'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/logging.py', lineno=846, 
message=''), style='long'), ReprEntry(lines=['    def _runtest_for(self, item: nodes.Item, when: str) -> Generator[None]:', '        
"""Implement the internals of the pytest_runtest_xxx() hooks."""', '        with catching_logs(', '            self.caplog_handler,', '   
level=self.log_level,', '        ) as caplog_handler, catching_logs(', '            self.report_handler,', '            
level=self.log_level,', '        ) as report_handler:', '            caplog_handler.reset()', '            report_handler.reset()', '     
item.stash = caplog_handler.records', '            item.stash = caplog_handler', '    ', '            try:', '>               yield'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/logging.py', lineno=829, 
message=''), style='long'), ReprEntry(lines=['    @hookimpl(wrapper=True)', '    def pytest_runtest_call(item: Item) -> Generator[None]:',
'        xfailed = item.stash.get(xfailed_key, None)', '        if xfailed is None:', '            item.stash = xfailed = 
evaluate_xfail_marks(item)', '    ', '        if xfailed and not item.config.option.runxfail and not xfailed.run:', '            
xfail("[NOTRUN] " + xfailed.reason)', '    ', '        try:', '>           return (yield)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/skipping.py', lineno=257, 
message=''), style='long'), ReprEntry(lines=['    def pytest_runtest_call(item: Item) -> None:', '        _update_current_test_var(item, 
"call")', '        try:', '            del sys.last_type', '            del sys.last_value', '            del sys.last_traceback', '      
if sys.version_info >= (3, 12, 0):', '                del sys.last_exc  # type:ignore', '        except AttributeError:', '            
pass', '        try:', '>           item.runtest()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/runner.py', lineno=174, 
message=''), style='long'), ReprEntry(lines=['    def runtest(self) -> None:', '        """Execute the underlying test function."""', '>  
self.ihook.pytest_pyfunc_call(pyfuncitem=self)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/python.py', lineno=1627, 
message=''), style='long'), ReprEntry(lines=['    def __call__(self, **kwargs: object) -> Any:', '        """Call the hook.', '    ', '   
Only accepts keyword arguments, which should match the hook', '        specification.', '    ', '        Returns the result(s) of calling 
all registered plugins, see', '        :ref:`calling`.', '        """', '        assert (', '            not self.is_historic()', '       
), "Cannot directly call a historic hook - use call_historic instead."', '        self._verify_all_args_are_provided(kwargs)', '        
firstresult = self.spec.opts.get("firstresult", False) if self.spec else False', '        # Copy because plugins may register other 
plugins during iteration (#438).', '>       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_hooks.py', lineno=513, 
message=''), style='long'), ReprEntry(lines=['    def _hookexec(', '        self,', '        hook_name: str,', '        methods: 
Sequence[HookImpl],', '        kwargs: Mapping,', '        firstresult: bool,', '    ) -> object | list:', '        # called from all 
hookcaller instances.', '        # enable_tracing will set its own wrapping function at self._inner_hookexec', '>       return 
self._inner_hookexec(hook_name, methods, kwargs, firstresult)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_manager.py', lineno=120, 
message=''), style='long'), ReprEntry(lines=['    @hookimpl(trylast=True)', '    def pytest_pyfunc_call(pyfuncitem: Function) -> object | 
None:', '        testfunction = pyfuncitem.obj', '        if is_async_function(testfunction):', '            
async_warn_and_skip(pyfuncitem.nodeid)', '        funcargs = pyfuncitem.funcargs', '        testargs = {arg: funcargs for arg in 
pyfuncitem._fixtureinfo.argnames}', '>       result = testfunction(**testargs)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/python.py', lineno=159, 
message=''), style='long'), ReprEntry(lines=['    def test_handles_a_short_word_without_trailing_newline(self, wc):', '>       
assert_equals_if(b"0 1 5\\n", wc(stdin=b"caffe"))'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='tests/task_02.py', lineno=14, message=''), style='long'), ReprEntry(lines=['    def 
assert_equals_if(expected, actual, message=None):', '        """Only show the expected vs. actual table on a truthy value."""', '        
if bool(actual):', '            assert_equals(expected, actual, message)', '        else:', '            if message:', '                
assert expected == actual, message', '            else:', '>               assert expected == actual', "E               AssertionError: 
assert b'0 1 5\\n' == b''", 'E                 ', 'E                 Use -v to get more diff'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='tests/realpython/assertions.py', lineno=17, message='AssertionError'), style='long')], extraline=None, 
style='long'), ReprFileLocation(path='/home/bartek/Git/materials-forked/wordcount/tests/realpython/assertions.py', lineno=17, 
message="AssertionError: assert b'0 1 5\\n' == b''\n  \n  Use -v to get more diff"), None)])

XXX
ExceptionChainRepr(reprtraceback=ReprTraceback(reprentries=[ReprEntry(lines=['    @classmethod', '    def from_call(', '        cls,', '  
func: Callable[[], TResult],', '        when: Literal["collect", "setup", "call", "teardown"],', '        reraise: type[BaseException] | 
tuple[type[BaseException], ...] | None = None,', '    ) -> CallInfo[TResult]:', '        """Call func, wrapping the result in a 
CallInfo.', '    ', '        :param func:', '            The function to call. Called without arguments.', '        :type func: 
Callable[[], _pytest.runner.TResult]', '        :param when:', '            The phase in which the function is called.', '        :param 
reraise:', '            Exception or exceptions that shall propagate if raised by the', '            function, instead of being wrapped in
the CallInfo.', '        """', '        excinfo = None', '        start = timing.time()', '        precise_start = timing.perf_counter()',
'        try:', '>           result: TResult | None = func()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/runner.py', lineno=341, 
message=''), style='long'), ReprEntry(lines=['>       lambda: runtest_hook(item=item, **kwds), when=when, reraise=reraise', '    )'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/runner.py', lineno=242, 
message=''), style='long'), ReprEntry(lines=['    def __call__(self, **kwargs: object) -> Any:', '        """Call the hook.', '    ', '   
Only accepts keyword arguments, which should match the hook', '        specification.', '    ', '        Returns the result(s) of calling 
all registered plugins, see', '        :ref:`calling`.', '        """', '        assert (', '            not self.is_historic()', '       
), "Cannot directly call a historic hook - use call_historic instead."', '        self._verify_all_args_are_provided(kwargs)', '        
firstresult = self.spec.opts.get("firstresult", False) if self.spec else False', '        # Copy because plugins may register other 
plugins during iteration (#438).', '>       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_hooks.py', lineno=513, 
message=''), style='long'), ReprEntry(lines=['    def _hookexec(', '        self,', '        hook_name: str,', '        methods: 
Sequence[HookImpl],', '        kwargs: Mapping,', '        firstresult: bool,', '    ) -> object | list:', '        # called from all 
hookcaller instances.', '        # enable_tracing will set its own wrapping function at self._inner_hookexec', '>       return 
self._inner_hookexec(hook_name, methods, kwargs, firstresult)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_manager.py', lineno=120, 
message=''), style='long'), ReprEntry(lines=['    @pytest.hookimpl(wrapper=True, tryfirst=True)', '    def pytest_runtest_call() -> 
Generator[None]:', '>       yield from thread_exception_runtest_hook()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/threadexception.py', lineno=92, 
message=''), style='long'), ReprEntry(lines=['    def thread_exception_runtest_hook() -> Generator[None]:', '        with 
catch_threading_exception() as cm:', '            try:', '>               yield'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/threadexception.py', lineno=68, 
message=''), style='long'), ReprEntry(lines=['    @pytest.hookimpl(wrapper=True, tryfirst=True)', '    def pytest_runtest_call() -> 
Generator[None]:', '>       yield from unraisable_exception_runtest_hook()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/unraisableexception.py', 
lineno=95, message=''), style='long'), ReprEntry(lines=['    def unraisable_exception_runtest_hook() -> Generator[None]:', '        with 
catch_unraisable_exception() as cm:', '            try:', '>               yield'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/unraisableexception.py', 
lineno=70, message=''), style='long'), ReprEntry(lines=['    @hookimpl(wrapper=True)', '    def pytest_runtest_call(self, item: 
nodes.Item) -> Generator[None]:', '        self.log_cli_handler.set_when("call")', '    ', '>       yield from self._runtest_for(item, 
"call")'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/logging.py', lineno=846, 
message=''), style='long'), ReprEntry(lines=['    def _runtest_for(self, item: nodes.Item, when: str) -> Generator[None]:', '        
"""Implement the internals of the pytest_runtest_xxx() hooks."""', '        with catching_logs(', '            self.caplog_handler,', '   
level=self.log_level,', '        ) as caplog_handler, catching_logs(', '            self.report_handler,', '            
level=self.log_level,', '        ) as report_handler:', '            caplog_handler.reset()', '            report_handler.reset()', '     
item.stash = caplog_handler.records', '            item.stash = caplog_handler', '    ', '            try:', '>               yield'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/logging.py', lineno=829, 
message=''), style='long'), ReprEntry(lines=['    @hookimpl(wrapper=True)', '    def pytest_runtest_call(item: Item) -> Generator[None]:',
'        xfailed = item.stash.get(xfailed_key, None)', '        if xfailed is None:', '            item.stash = xfailed = 
evaluate_xfail_marks(item)', '    ', '        if xfailed and not item.config.option.runxfail and not xfailed.run:', '            
xfail("[NOTRUN] " + xfailed.reason)', '    ', '        try:', '>           return (yield)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/skipping.py', lineno=257, 
message=''), style='long'), ReprEntry(lines=['    def pytest_runtest_call(item: Item) -> None:', '        _update_current_test_var(item, 
"call")', '        try:', '            del sys.last_type', '            del sys.last_value', '            del sys.last_traceback', '      
if sys.version_info >= (3, 12, 0):', '                del sys.last_exc  # type:ignore', '        except AttributeError:', '            
pass', '        try:', '>           item.runtest()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/runner.py', lineno=174, 
message=''), style='long'), ReprEntry(lines=['    def runtest(self) -> None:', '        """Execute the underlying test function."""', '>  
self.ihook.pytest_pyfunc_call(pyfuncitem=self)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/python.py', lineno=1627, 
message=''), style='long'), ReprEntry(lines=['    def __call__(self, **kwargs: object) -> Any:', '        """Call the hook.', '    ', '   
Only accepts keyword arguments, which should match the hook', '        specification.', '    ', '        Returns the result(s) of calling 
all registered plugins, see', '        :ref:`calling`.', '        """', '        assert (', '            not self.is_historic()', '       
), "Cannot directly call a historic hook - use call_historic instead."', '        self._verify_all_args_are_provided(kwargs)', '        
firstresult = self.spec.opts.get("firstresult", False) if self.spec else False', '        # Copy because plugins may register other 
plugins during iteration (#438).', '>       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_hooks.py', lineno=513, 
message=''), style='long'), ReprEntry(lines=['    def _hookexec(', '        self,', '        hook_name: str,', '        methods: 
Sequence[HookImpl],', '        kwargs: Mapping,', '        firstresult: bool,', '    ) -> object | list:', '        # called from all 
hookcaller instances.', '        # enable_tracing will set its own wrapping function at self._inner_hookexec', '>       return 
self._inner_hookexec(hook_name, methods, kwargs, firstresult)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_manager.py', lineno=120, 
message=''), style='long'), ReprEntry(lines=['    @hookimpl(trylast=True)', '    def pytest_pyfunc_call(pyfuncitem: Function) -> object | 
None:', '        testfunction = pyfuncitem.obj', '        if is_async_function(testfunction):', '            
async_warn_and_skip(pyfuncitem.nodeid)', '        funcargs = pyfuncitem.funcargs', '        testargs = {arg: funcargs for arg in 
pyfuncitem._fixtureinfo.argnames}', '>       result = testfunction(**testargs)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/python.py', lineno=159, 
message=''), style='long'), ReprEntry(lines=['    def test_handles_a_short_word_with_trailing_newline(self, wc):', '>       
assert_equals_if(b"1 1 6\\n", wc(stdin=b"caffe\\n"))'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='tests/task_02.py', lineno=17, message=''), style='long'), ReprEntry(lines=['    def 
assert_equals_if(expected, actual, message=None):', '        """Only show the expected vs. actual table on a truthy value."""', '        
if bool(actual):', '            assert_equals(expected, actual, message)', '        else:', '            if message:', '                
assert expected == actual, message', '            else:', '>               assert expected == actual', "E               AssertionError: 
assert b'1 1 6\\n' == b''", 'E                 ', 'E                 Use -v to get more diff'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='tests/realpython/assertions.py', lineno=17, message='AssertionError'), style='long')], extraline=None, 
style='long'), reprcrash=ReprFileLocation(path='/home/bartek/Git/materials-forked/wordcount/tests/realpython/assertions.py', lineno=17, 
message="AssertionError: assert b'1 1 6\\n' == b''\n  \n  Use -v to get more diff"), sections=[], 
chain=[(ReprTraceback(reprentries=[ReprEntry(lines=['    @classmethod', '    def from_call(', '        cls,', '        func: Callable[[], 
TResult],', '        when: Literal["collect", "setup", "call", "teardown"],', '        reraise: type[BaseException] | 
tuple[type[BaseException], ...] | None = None,', '    ) -> CallInfo[TResult]:', '        """Call func, wrapping the result in a 
CallInfo.', '    ', '        :param func:', '            The function to call. Called without arguments.', '        :type func: 
Callable[[], _pytest.runner.TResult]', '        :param when:', '            The phase in which the function is called.', '        :param 
reraise:', '            Exception or exceptions that shall propagate if raised by the', '            function, instead of being wrapped in
the CallInfo.', '        """', '        excinfo = None', '        start = timing.time()', '        precise_start = timing.perf_counter()',
'        try:', '>           result: TResult | None = func()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/runner.py', lineno=341, 
message=''), style='long'), ReprEntry(lines=['>       lambda: runtest_hook(item=item, **kwds), when=when, reraise=reraise', '    )'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/runner.py', lineno=242, 
message=''), style='long'), ReprEntry(lines=['    def __call__(self, **kwargs: object) -> Any:', '        """Call the hook.', '    ', '   
Only accepts keyword arguments, which should match the hook', '        specification.', '    ', '        Returns the result(s) of calling 
all registered plugins, see', '        :ref:`calling`.', '        """', '        assert (', '            not self.is_historic()', '       
), "Cannot directly call a historic hook - use call_historic instead."', '        self._verify_all_args_are_provided(kwargs)', '        
firstresult = self.spec.opts.get("firstresult", False) if self.spec else False', '        # Copy because plugins may register other 
plugins during iteration (#438).', '>       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_hooks.py', lineno=513, 
message=''), style='long'), ReprEntry(lines=['    def _hookexec(', '        self,', '        hook_name: str,', '        methods: 
Sequence[HookImpl],', '        kwargs: Mapping,', '        firstresult: bool,', '    ) -> object | list:', '        # called from all 
hookcaller instances.', '        # enable_tracing will set its own wrapping function at self._inner_hookexec', '>       return 
self._inner_hookexec(hook_name, methods, kwargs, firstresult)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_manager.py', lineno=120, 
message=''), style='long'), ReprEntry(lines=['    @pytest.hookimpl(wrapper=True, tryfirst=True)', '    def pytest_runtest_call() -> 
Generator[None]:', '>       yield from thread_exception_runtest_hook()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/threadexception.py', lineno=92, 
message=''), style='long'), ReprEntry(lines=['    def thread_exception_runtest_hook() -> Generator[None]:', '        with 
catch_threading_exception() as cm:', '            try:', '>               yield'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/threadexception.py', lineno=68, 
message=''), style='long'), ReprEntry(lines=['    @pytest.hookimpl(wrapper=True, tryfirst=True)', '    def pytest_runtest_call() -> 
Generator[None]:', '>       yield from unraisable_exception_runtest_hook()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/unraisableexception.py', 
lineno=95, message=''), style='long'), ReprEntry(lines=['    def unraisable_exception_runtest_hook() -> Generator[None]:', '        with 
catch_unraisable_exception() as cm:', '            try:', '>               yield'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/unraisableexception.py', 
lineno=70, message=''), style='long'), ReprEntry(lines=['    @hookimpl(wrapper=True)', '    def pytest_runtest_call(self, item: 
nodes.Item) -> Generator[None]:', '        self.log_cli_handler.set_when("call")', '    ', '>       yield from self._runtest_for(item, 
"call")'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/logging.py', lineno=846, 
message=''), style='long'), ReprEntry(lines=['    def _runtest_for(self, item: nodes.Item, when: str) -> Generator[None]:', '        
"""Implement the internals of the pytest_runtest_xxx() hooks."""', '        with catching_logs(', '            self.caplog_handler,', '   
level=self.log_level,', '        ) as caplog_handler, catching_logs(', '            self.report_handler,', '            
level=self.log_level,', '        ) as report_handler:', '            caplog_handler.reset()', '            report_handler.reset()', '     
item.stash = caplog_handler.records', '            item.stash = caplog_handler', '    ', '            try:', '>               yield'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/logging.py', lineno=829, 
message=''), style='long'), ReprEntry(lines=['    @hookimpl(wrapper=True)', '    def pytest_runtest_call(item: Item) -> Generator[None]:',
'        xfailed = item.stash.get(xfailed_key, None)', '        if xfailed is None:', '            item.stash = xfailed = 
evaluate_xfail_marks(item)', '    ', '        if xfailed and not item.config.option.runxfail and not xfailed.run:', '            
xfail("[NOTRUN] " + xfailed.reason)', '    ', '        try:', '>           return (yield)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/skipping.py', lineno=257, 
message=''), style='long'), ReprEntry(lines=['    def pytest_runtest_call(item: Item) -> None:', '        _update_current_test_var(item, 
"call")', '        try:', '            del sys.last_type', '            del sys.last_value', '            del sys.last_traceback', '      
if sys.version_info >= (3, 12, 0):', '                del sys.last_exc  # type:ignore', '        except AttributeError:', '            
pass', '        try:', '>           item.runtest()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/runner.py', lineno=174, 
message=''), style='long'), ReprEntry(lines=['    def runtest(self) -> None:', '        """Execute the underlying test function."""', '>  
self.ihook.pytest_pyfunc_call(pyfuncitem=self)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/python.py', lineno=1627, 
message=''), style='long'), ReprEntry(lines=['    def __call__(self, **kwargs: object) -> Any:', '        """Call the hook.', '    ', '   
Only accepts keyword arguments, which should match the hook', '        specification.', '    ', '        Returns the result(s) of calling 
all registered plugins, see', '        :ref:`calling`.', '        """', '        assert (', '            not self.is_historic()', '       
), "Cannot directly call a historic hook - use call_historic instead."', '        self._verify_all_args_are_provided(kwargs)', '        
firstresult = self.spec.opts.get("firstresult", False) if self.spec else False', '        # Copy because plugins may register other 
plugins during iteration (#438).', '>       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_hooks.py', lineno=513, 
message=''), style='long'), ReprEntry(lines=['    def _hookexec(', '        self,', '        hook_name: str,', '        methods: 
Sequence[HookImpl],', '        kwargs: Mapping,', '        firstresult: bool,', '    ) -> object | list:', '        # called from all 
hookcaller instances.', '        # enable_tracing will set its own wrapping function at self._inner_hookexec', '>       return 
self._inner_hookexec(hook_name, methods, kwargs, firstresult)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_manager.py', lineno=120, 
message=''), style='long'), ReprEntry(lines=['    @hookimpl(trylast=True)', '    def pytest_pyfunc_call(pyfuncitem: Function) -> object | 
None:', '        testfunction = pyfuncitem.obj', '        if is_async_function(testfunction):', '            
async_warn_and_skip(pyfuncitem.nodeid)', '        funcargs = pyfuncitem.funcargs', '        testargs = {arg: funcargs for arg in 
pyfuncitem._fixtureinfo.argnames}', '>       result = testfunction(**testargs)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/python.py', lineno=159, 
message=''), style='long'), ReprEntry(lines=['    def test_handles_a_short_word_with_trailing_newline(self, wc):', '>       
assert_equals_if(b"1 1 6\\n", wc(stdin=b"caffe\\n"))'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='tests/task_02.py', lineno=17, message=''), style='long'), ReprEntry(lines=['    def 
assert_equals_if(expected, actual, message=None):', '        """Only show the expected vs. actual table on a truthy value."""', '        
if bool(actual):', '            assert_equals(expected, actual, message)', '        else:', '            if message:', '                
assert expected == actual, message', '            else:', '>               assert expected == actual', "E               AssertionError: 
assert b'1 1 6\\n' == b''", 'E                 ', 'E                 Use -v to get more diff'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='tests/realpython/assertions.py', lineno=17, message='AssertionError'), style='long')], extraline=None, 
style='long'), ReprFileLocation(path='/home/bartek/Git/materials-forked/wordcount/tests/realpython/assertions.py', lineno=17, 
message="AssertionError: assert b'1 1 6\\n' == b''\n  \n  Use -v to get more diff"), None)])

XXX
ExceptionChainRepr(reprtraceback=ReprTraceback(reprentries=[ReprEntry(lines=['    @classmethod', '    def from_call(', '        cls,', '  
func: Callable[[], TResult],', '        when: Literal["collect", "setup", "call", "teardown"],', '        reraise: type[BaseException] | 
tuple[type[BaseException], ...] | None = None,', '    ) -> CallInfo[TResult]:', '        """Call func, wrapping the result in a 
CallInfo.', '    ', '        :param func:', '            The function to call. Called without arguments.', '        :type func: 
Callable[[], _pytest.runner.TResult]', '        :param when:', '            The phase in which the function is called.', '        :param 
reraise:', '            Exception or exceptions that shall propagate if raised by the', '            function, instead of being wrapped in
the CallInfo.', '        """', '        excinfo = None', '        start = timing.time()', '        precise_start = timing.perf_counter()',
'        try:', '>           result: TResult | None = func()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/runner.py', lineno=341, 
message=''), style='long'), ReprEntry(lines=['>       lambda: runtest_hook(item=item, **kwds), when=when, reraise=reraise', '    )'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/runner.py', lineno=242, 
message=''), style='long'), ReprEntry(lines=['    def __call__(self, **kwargs: object) -> Any:', '        """Call the hook.', '    ', '   
Only accepts keyword arguments, which should match the hook', '        specification.', '    ', '        Returns the result(s) of calling 
all registered plugins, see', '        :ref:`calling`.', '        """', '        assert (', '            not self.is_historic()', '       
), "Cannot directly call a historic hook - use call_historic instead."', '        self._verify_all_args_are_provided(kwargs)', '        
firstresult = self.spec.opts.get("firstresult", False) if self.spec else False', '        # Copy because plugins may register other 
plugins during iteration (#438).', '>       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_hooks.py', lineno=513, 
message=''), style='long'), ReprEntry(lines=['    def _hookexec(', '        self,', '        hook_name: str,', '        methods: 
Sequence[HookImpl],', '        kwargs: Mapping,', '        firstresult: bool,', '    ) -> object | list:', '        # called from all 
hookcaller instances.', '        # enable_tracing will set its own wrapping function at self._inner_hookexec', '>       return 
self._inner_hookexec(hook_name, methods, kwargs, firstresult)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_manager.py', lineno=120, 
message=''), style='long'), ReprEntry(lines=['    @pytest.hookimpl(wrapper=True, tryfirst=True)', '    def pytest_runtest_call() -> 
Generator[None]:', '>       yield from thread_exception_runtest_hook()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/threadexception.py', lineno=92, 
message=''), style='long'), ReprEntry(lines=['    def thread_exception_runtest_hook() -> Generator[None]:', '        with 
catch_threading_exception() as cm:', '            try:', '>               yield'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/threadexception.py', lineno=68, 
message=''), style='long'), ReprEntry(lines=['    @pytest.hookimpl(wrapper=True, tryfirst=True)', '    def pytest_runtest_call() -> 
Generator[None]:', '>       yield from unraisable_exception_runtest_hook()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/unraisableexception.py', 
lineno=95, message=''), style='long'), ReprEntry(lines=['    def unraisable_exception_runtest_hook() -> Generator[None]:', '        with 
catch_unraisable_exception() as cm:', '            try:', '>               yield'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/unraisableexception.py', 
lineno=70, message=''), style='long'), ReprEntry(lines=['    @hookimpl(wrapper=True)', '    def pytest_runtest_call(self, item: 
nodes.Item) -> Generator[None]:', '        self.log_cli_handler.set_when("call")', '    ', '>       yield from self._runtest_for(item, 
"call")'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/logging.py', lineno=846, 
message=''), style='long'), ReprEntry(lines=['    def _runtest_for(self, item: nodes.Item, when: str) -> Generator[None]:', '        
"""Implement the internals of the pytest_runtest_xxx() hooks."""', '        with catching_logs(', '            self.caplog_handler,', '   
level=self.log_level,', '        ) as caplog_handler, catching_logs(', '            self.report_handler,', '            
level=self.log_level,', '        ) as report_handler:', '            caplog_handler.reset()', '            report_handler.reset()', '     
item.stash = caplog_handler.records', '            item.stash = caplog_handler', '    ', '            try:', '>               yield'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/logging.py', lineno=829, 
message=''), style='long'), ReprEntry(lines=['    @hookimpl(wrapper=True)', '    def pytest_runtest_call(item: Item) -> Generator[None]:',
'        xfailed = item.stash.get(xfailed_key, None)', '        if xfailed is None:', '            item.stash = xfailed = 
evaluate_xfail_marks(item)', '    ', '        if xfailed and not item.config.option.runxfail and not xfailed.run:', '            
xfail("[NOTRUN] " + xfailed.reason)', '    ', '        try:', '>           return (yield)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/skipping.py', lineno=257, 
message=''), style='long'), ReprEntry(lines=['    def pytest_runtest_call(item: Item) -> None:', '        _update_current_test_var(item, 
"call")', '        try:', '            del sys.last_type', '            del sys.last_value', '            del sys.last_traceback', '      
if sys.version_info >= (3, 12, 0):', '                del sys.last_exc  # type:ignore', '        except AttributeError:', '            
pass', '        try:', '>           item.runtest()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/runner.py', lineno=174, 
message=''), style='long'), ReprEntry(lines=['    def runtest(self) -> None:', '        """Execute the underlying test function."""', '>  
self.ihook.pytest_pyfunc_call(pyfuncitem=self)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/python.py', lineno=1627, 
message=''), style='long'), ReprEntry(lines=['    def __call__(self, **kwargs: object) -> Any:', '        """Call the hook.', '    ', '   
Only accepts keyword arguments, which should match the hook', '        specification.', '    ', '        Returns the result(s) of calling 
all registered plugins, see', '        :ref:`calling`.', '        """', '        assert (', '            not self.is_historic()', '       
), "Cannot directly call a historic hook - use call_historic instead."', '        self._verify_all_args_are_provided(kwargs)', '        
firstresult = self.spec.opts.get("firstresult", False) if self.spec else False', '        # Copy because plugins may register other 
plugins during iteration (#438).', '>       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_hooks.py', lineno=513, 
message=''), style='long'), ReprEntry(lines=['    def _hookexec(', '        self,', '        hook_name: str,', '        methods: 
Sequence[HookImpl],', '        kwargs: Mapping,', '        firstresult: bool,', '    ) -> object | list:', '        # called from all 
hookcaller instances.', '        # enable_tracing will set its own wrapping function at self._inner_hookexec', '>       return 
self._inner_hookexec(hook_name, methods, kwargs, firstresult)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_manager.py', lineno=120, 
message=''), style='long'), ReprEntry(lines=['    @hookimpl(trylast=True)', '    def pytest_pyfunc_call(pyfuncitem: Function) -> object | 
None:', '        testfunction = pyfuncitem.obj', '        if is_async_function(testfunction):', '            
async_warn_and_skip(pyfuncitem.nodeid)', '        funcargs = pyfuncitem.funcargs', '        testargs = {arg: funcargs for arg in 
pyfuncitem._fixtureinfo.argnames}', '>       result = testfunction(**testargs)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/python.py', lineno=159, 
message=''), style='long'), ReprEntry(lines=['    def test_delimits_words_on_whitespace(self, wc):', '>       assert_equals_if(', '       
expected=b"1 1 9\\n",', '            actual=wc(stdin=b"back-end\\n"),', '            message="Pay attention to punctuation and special 
characters."', '        )'], reprfuncargs=None, reprlocals=None, reprfileloc=ReprFileLocation(path='tests/task_02.py', lineno=20, 
message=''), style='long'), ReprEntry(lines=['    def assert_equals_if(expected, actual, message=None):', '        """Only show the 
expected vs. actual table on a truthy value."""', '        if bool(actual):', '            assert_equals(expected, actual, message)', '   
else:', '            if message:', '>               assert expected == actual, message', 'E               AssertionError: Pay attention to
punctuation and special characters.', "E               assert b'1 1 9\\n' == b''", 'E                 ', 'E                 Use -v to get 
more diff'], reprfuncargs=None, reprlocals=None, reprfileloc=ReprFileLocation(path='tests/realpython/assertions.py', lineno=15, 
message='AssertionError'), style='long')], extraline=None, style='long'), 
reprcrash=ReprFileLocation(path='/home/bartek/Git/materials-forked/wordcount/tests/realpython/assertions.py', lineno=15, 
message="AssertionError: Pay attention to punctuation and special characters.\nassert b'1 1 9\\n' == b''\n  \n  Use -v to get more diff"),
sections=[], chain=[(ReprTraceback(reprentries=[ReprEntry(lines=['    @classmethod', '    def from_call(', '        cls,', '        func: 
Callable[[], TResult],', '        when: Literal["collect", "setup", "call", "teardown"],', '        reraise: type[BaseException] | 
tuple[type[BaseException], ...] | None = None,', '    ) -> CallInfo[TResult]:', '        """Call func, wrapping the result in a 
CallInfo.', '    ', '        :param func:', '            The function to call. Called without arguments.', '        :type func: 
Callable[[], _pytest.runner.TResult]', '        :param when:', '            The phase in which the function is called.', '        :param 
reraise:', '            Exception or exceptions that shall propagate if raised by the', '            function, instead of being wrapped in
the CallInfo.', '        """', '        excinfo = None', '        start = timing.time()', '        precise_start = timing.perf_counter()',
'        try:', '>           result: TResult | None = func()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/runner.py', lineno=341, 
message=''), style='long'), ReprEntry(lines=['>       lambda: runtest_hook(item=item, **kwds), when=when, reraise=reraise', '    )'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/runner.py', lineno=242, 
message=''), style='long'), ReprEntry(lines=['    def __call__(self, **kwargs: object) -> Any:', '        """Call the hook.', '    ', '   
Only accepts keyword arguments, which should match the hook', '        specification.', '    ', '        Returns the result(s) of calling 
all registered plugins, see', '        :ref:`calling`.', '        """', '        assert (', '            not self.is_historic()', '       
), "Cannot directly call a historic hook - use call_historic instead."', '        self._verify_all_args_are_provided(kwargs)', '        
firstresult = self.spec.opts.get("firstresult", False) if self.spec else False', '        # Copy because plugins may register other 
plugins during iteration (#438).', '>       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_hooks.py', lineno=513, 
message=''), style='long'), ReprEntry(lines=['    def _hookexec(', '        self,', '        hook_name: str,', '        methods: 
Sequence[HookImpl],', '        kwargs: Mapping,', '        firstresult: bool,', '    ) -> object | list:', '        # called from all 
hookcaller instances.', '        # enable_tracing will set its own wrapping function at self._inner_hookexec', '>       return 
self._inner_hookexec(hook_name, methods, kwargs, firstresult)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_manager.py', lineno=120, 
message=''), style='long'), ReprEntry(lines=['    @pytest.hookimpl(wrapper=True, tryfirst=True)', '    def pytest_runtest_call() -> 
Generator[None]:', '>       yield from thread_exception_runtest_hook()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/threadexception.py', lineno=92, 
message=''), style='long'), ReprEntry(lines=['    def thread_exception_runtest_hook() -> Generator[None]:', '        with 
catch_threading_exception() as cm:', '            try:', '>               yield'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/threadexception.py', lineno=68, 
message=''), style='long'), ReprEntry(lines=['    @pytest.hookimpl(wrapper=True, tryfirst=True)', '    def pytest_runtest_call() -> 
Generator[None]:', '>       yield from unraisable_exception_runtest_hook()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/unraisableexception.py', 
lineno=95, message=''), style='long'), ReprEntry(lines=['    def unraisable_exception_runtest_hook() -> Generator[None]:', '        with 
catch_unraisable_exception() as cm:', '            try:', '>               yield'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/unraisableexception.py', 
lineno=70, message=''), style='long'), ReprEntry(lines=['    @hookimpl(wrapper=True)', '    def pytest_runtest_call(self, item: 
nodes.Item) -> Generator[None]:', '        self.log_cli_handler.set_when("call")', '    ', '>       yield from self._runtest_for(item, 
"call")'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/logging.py', lineno=846, 
message=''), style='long'), ReprEntry(lines=['    def _runtest_for(self, item: nodes.Item, when: str) -> Generator[None]:', '        
"""Implement the internals of the pytest_runtest_xxx() hooks."""', '        with catching_logs(', '            self.caplog_handler,', '   
level=self.log_level,', '        ) as caplog_handler, catching_logs(', '            self.report_handler,', '            
level=self.log_level,', '        ) as report_handler:', '            caplog_handler.reset()', '            report_handler.reset()', '     
item.stash = caplog_handler.records', '            item.stash = caplog_handler', '    ', '            try:', '>               yield'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/logging.py', lineno=829, 
message=''), style='long'), ReprEntry(lines=['    @hookimpl(wrapper=True)', '    def pytest_runtest_call(item: Item) -> Generator[None]:',
'        xfailed = item.stash.get(xfailed_key, None)', '        if xfailed is None:', '            item.stash = xfailed = 
evaluate_xfail_marks(item)', '    ', '        if xfailed and not item.config.option.runxfail and not xfailed.run:', '            
xfail("[NOTRUN] " + xfailed.reason)', '    ', '        try:', '>           return (yield)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/skipping.py', lineno=257, 
message=''), style='long'), ReprEntry(lines=['    def pytest_runtest_call(item: Item) -> None:', '        _update_current_test_var(item, 
"call")', '        try:', '            del sys.last_type', '            del sys.last_value', '            del sys.last_traceback', '      
if sys.version_info >= (3, 12, 0):', '                del sys.last_exc  # type:ignore', '        except AttributeError:', '            
pass', '        try:', '>           item.runtest()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/runner.py', lineno=174, 
message=''), style='long'), ReprEntry(lines=['    def runtest(self) -> None:', '        """Execute the underlying test function."""', '>  
self.ihook.pytest_pyfunc_call(pyfuncitem=self)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/python.py', lineno=1627, 
message=''), style='long'), ReprEntry(lines=['    def __call__(self, **kwargs: object) -> Any:', '        """Call the hook.', '    ', '   
Only accepts keyword arguments, which should match the hook', '        specification.', '    ', '        Returns the result(s) of calling 
all registered plugins, see', '        :ref:`calling`.', '        """', '        assert (', '            not self.is_historic()', '       
), "Cannot directly call a historic hook - use call_historic instead."', '        self._verify_all_args_are_provided(kwargs)', '        
firstresult = self.spec.opts.get("firstresult", False) if self.spec else False', '        # Copy because plugins may register other 
plugins during iteration (#438).', '>       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_hooks.py', lineno=513, 
message=''), style='long'), ReprEntry(lines=['    def _hookexec(', '        self,', '        hook_name: str,', '        methods: 
Sequence[HookImpl],', '        kwargs: Mapping,', '        firstresult: bool,', '    ) -> object | list:', '        # called from all 
hookcaller instances.', '        # enable_tracing will set its own wrapping function at self._inner_hookexec', '>       return 
self._inner_hookexec(hook_name, methods, kwargs, firstresult)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_manager.py', lineno=120, 
message=''), style='long'), ReprEntry(lines=['    @hookimpl(trylast=True)', '    def pytest_pyfunc_call(pyfuncitem: Function) -> object | 
None:', '        testfunction = pyfuncitem.obj', '        if is_async_function(testfunction):', '            
async_warn_and_skip(pyfuncitem.nodeid)', '        funcargs = pyfuncitem.funcargs', '        testargs = {arg: funcargs for arg in 
pyfuncitem._fixtureinfo.argnames}', '>       result = testfunction(**testargs)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/python.py', lineno=159, 
message=''), style='long'), ReprEntry(lines=['    def test_delimits_words_on_whitespace(self, wc):', '>       assert_equals_if(', '       
expected=b"1 1 9\\n",', '            actual=wc(stdin=b"back-end\\n"),', '            message="Pay attention to punctuation and special 
characters."', '        )'], reprfuncargs=None, reprlocals=None, reprfileloc=ReprFileLocation(path='tests/task_02.py', lineno=20, 
message=''), style='long'), ReprEntry(lines=['    def assert_equals_if(expected, actual, message=None):', '        """Only show the 
expected vs. actual table on a truthy value."""', '        if bool(actual):', '            assert_equals(expected, actual, message)', '   
else:', '            if message:', '>               assert expected == actual, message', 'E               AssertionError: Pay attention to
punctuation and special characters.', "E               assert b'1 1 9\\n' == b''", 'E                 ', 'E                 Use -v to get 
more diff'], reprfuncargs=None, reprlocals=None, reprfileloc=ReprFileLocation(path='tests/realpython/assertions.py', lineno=15, 
message='AssertionError'), style='long')], extraline=None, style='long'), 
ReprFileLocation(path='/home/bartek/Git/materials-forked/wordcount/tests/realpython/assertions.py', lineno=15, message="AssertionError: 
Pay attention to punctuation and special characters.\nassert b'1 1 9\\n' == b''\n  \n  Use -v to get more diff"), None)])

XXX
ExceptionChainRepr(reprtraceback=ReprTraceback(reprentries=[ReprEntry(lines=['    @classmethod', '    def from_call(', '        cls,', '  
func: Callable[[], TResult],', '        when: Literal["collect", "setup", "call", "teardown"],', '        reraise: type[BaseException] | 
tuple[type[BaseException], ...] | None = None,', '    ) -> CallInfo[TResult]:', '        """Call func, wrapping the result in a 
CallInfo.', '    ', '        :param func:', '            The function to call. Called without arguments.', '        :type func: 
Callable[[], _pytest.runner.TResult]', '        :param when:', '            The phase in which the function is called.', '        :param 
reraise:', '            Exception or exceptions that shall propagate if raised by the', '            function, instead of being wrapped in
the CallInfo.', '        """', '        excinfo = None', '        start = timing.time()', '        precise_start = timing.perf_counter()',
'        try:', '>           result: TResult | None = func()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/runner.py', lineno=341, 
message=''), style='long'), ReprEntry(lines=['>       lambda: runtest_hook(item=item, **kwds), when=when, reraise=reraise', '    )'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/runner.py', lineno=242, 
message=''), style='long'), ReprEntry(lines=['    def __call__(self, **kwargs: object) -> Any:', '        """Call the hook.', '    ', '   
Only accepts keyword arguments, which should match the hook', '        specification.', '    ', '        Returns the result(s) of calling 
all registered plugins, see', '        :ref:`calling`.', '        """', '        assert (', '            not self.is_historic()', '       
), "Cannot directly call a historic hook - use call_historic instead."', '        self._verify_all_args_are_provided(kwargs)', '        
firstresult = self.spec.opts.get("firstresult", False) if self.spec else False', '        # Copy because plugins may register other 
plugins during iteration (#438).', '>       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_hooks.py', lineno=513, 
message=''), style='long'), ReprEntry(lines=['    def _hookexec(', '        self,', '        hook_name: str,', '        methods: 
Sequence[HookImpl],', '        kwargs: Mapping,', '        firstresult: bool,', '    ) -> object | list:', '        # called from all 
hookcaller instances.', '        # enable_tracing will set its own wrapping function at self._inner_hookexec', '>       return 
self._inner_hookexec(hook_name, methods, kwargs, firstresult)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_manager.py', lineno=120, 
message=''), style='long'), ReprEntry(lines=['    @pytest.hookimpl(wrapper=True, tryfirst=True)', '    def pytest_runtest_call() -> 
Generator[None]:', '>       yield from thread_exception_runtest_hook()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/threadexception.py', lineno=92, 
message=''), style='long'), ReprEntry(lines=['    def thread_exception_runtest_hook() -> Generator[None]:', '        with 
catch_threading_exception() as cm:', '            try:', '>               yield'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/threadexception.py', lineno=68, 
message=''), style='long'), ReprEntry(lines=['    @pytest.hookimpl(wrapper=True, tryfirst=True)', '    def pytest_runtest_call() -> 
Generator[None]:', '>       yield from unraisable_exception_runtest_hook()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/unraisableexception.py', 
lineno=95, message=''), style='long'), ReprEntry(lines=['    def unraisable_exception_runtest_hook() -> Generator[None]:', '        with 
catch_unraisable_exception() as cm:', '            try:', '>               yield'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/unraisableexception.py', 
lineno=70, message=''), style='long'), ReprEntry(lines=['    @hookimpl(wrapper=True)', '    def pytest_runtest_call(self, item: 
nodes.Item) -> Generator[None]:', '        self.log_cli_handler.set_when("call")', '    ', '>       yield from self._runtest_for(item, 
"call")'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/logging.py', lineno=846, 
message=''), style='long'), ReprEntry(lines=['    def _runtest_for(self, item: nodes.Item, when: str) -> Generator[None]:', '        
"""Implement the internals of the pytest_runtest_xxx() hooks."""', '        with catching_logs(', '            self.caplog_handler,', '   
level=self.log_level,', '        ) as caplog_handler, catching_logs(', '            self.report_handler,', '            
level=self.log_level,', '        ) as report_handler:', '            caplog_handler.reset()', '            report_handler.reset()', '     
item.stash = caplog_handler.records', '            item.stash = caplog_handler', '    ', '            try:', '>               yield'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/logging.py', lineno=829, 
message=''), style='long'), ReprEntry(lines=['    @hookimpl(wrapper=True)', '    def pytest_runtest_call(item: Item) -> Generator[None]:',
'        xfailed = item.stash.get(xfailed_key, None)', '        if xfailed is None:', '            item.stash = xfailed = 
evaluate_xfail_marks(item)', '    ', '        if xfailed and not item.config.option.runxfail and not xfailed.run:', '            
xfail("[NOTRUN] " + xfailed.reason)', '    ', '        try:', '>           return (yield)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/skipping.py', lineno=257, 
message=''), style='long'), ReprEntry(lines=['    def pytest_runtest_call(item: Item) -> None:', '        _update_current_test_var(item, 
"call")', '        try:', '            del sys.last_type', '            del sys.last_value', '            del sys.last_traceback', '      
if sys.version_info >= (3, 12, 0):', '                del sys.last_exc  # type:ignore', '        except AttributeError:', '            
pass', '        try:', '>           item.runtest()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/runner.py', lineno=174, 
message=''), style='long'), ReprEntry(lines=['    def runtest(self) -> None:', '        """Execute the underlying test function."""', '>  
self.ihook.pytest_pyfunc_call(pyfuncitem=self)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/python.py', lineno=1627, 
message=''), style='long'), ReprEntry(lines=['    def __call__(self, **kwargs: object) -> Any:', '        """Call the hook.', '    ', '   
Only accepts keyword arguments, which should match the hook', '        specification.', '    ', '        Returns the result(s) of calling 
all registered plugins, see', '        :ref:`calling`.', '        """', '        assert (', '            not self.is_historic()', '       
), "Cannot directly call a historic hook - use call_historic instead."', '        self._verify_all_args_are_provided(kwargs)', '        
firstresult = self.spec.opts.get("firstresult", False) if self.spec else False', '        # Copy because plugins may register other 
plugins during iteration (#438).', '>       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_hooks.py', lineno=513, 
message=''), style='long'), ReprEntry(lines=['    def _hookexec(', '        self,', '        hook_name: str,', '        methods: 
Sequence[HookImpl],', '        kwargs: Mapping,', '        firstresult: bool,', '    ) -> object | list:', '        # called from all 
hookcaller instances.', '        # enable_tracing will set its own wrapping function at self._inner_hookexec', '>       return 
self._inner_hookexec(hook_name, methods, kwargs, firstresult)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_manager.py', lineno=120, 
message=''), style='long'), ReprEntry(lines=['    @hookimpl(trylast=True)', '    def pytest_pyfunc_call(pyfuncitem: Function) -> object | 
None:', '        testfunction = pyfuncitem.obj', '        if is_async_function(testfunction):', '            
async_warn_and_skip(pyfuncitem.nodeid)', '        funcargs = pyfuncitem.funcargs', '        testargs = {arg: funcargs for arg in 
pyfuncitem._fixtureinfo.argnames}', '>       result = testfunction(**testargs)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/python.py', lineno=159, 
message=''), style='long'), ReprEntry(lines=['    def test_handles_linux_newline(self, wc):', '        r"""Handles the Linux newline 
(\\n)"""', '>       assert_equals_if(b"1 2 7\\n", wc(stdin=b"hot\\ntea"))'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='tests/task_02.py', lineno=28, message=''), style='long'), ReprEntry(lines=['    def 
assert_equals_if(expected, actual, message=None):', '        """Only show the expected vs. actual table on a truthy value."""', '        
if bool(actual):', '            assert_equals(expected, actual, message)', '        else:', '            if message:', '                
assert expected == actual, message', '            else:', '>               assert expected == actual', "E               AssertionError: 
assert b'1 2 7\\n' == b''", 'E                 ', 'E                 Use -v to get more diff'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='tests/realpython/assertions.py', lineno=17, message='AssertionError'), style='long')], extraline=None, 
style='long'), reprcrash=ReprFileLocation(path='/home/bartek/Git/materials-forked/wordcount/tests/realpython/assertions.py', lineno=17, 
message="AssertionError: assert b'1 2 7\\n' == b''\n  \n  Use -v to get more diff"), sections=[], 
chain=[(ReprTraceback(reprentries=[ReprEntry(lines=['    @classmethod', '    def from_call(', '        cls,', '        func: Callable[[], 
TResult],', '        when: Literal["collect", "setup", "call", "teardown"],', '        reraise: type[BaseException] | 
tuple[type[BaseException], ...] | None = None,', '    ) -> CallInfo[TResult]:', '        """Call func, wrapping the result in a 
CallInfo.', '    ', '        :param func:', '            The function to call. Called without arguments.', '        :type func: 
Callable[[], _pytest.runner.TResult]', '        :param when:', '            The phase in which the function is called.', '        :param 
reraise:', '            Exception or exceptions that shall propagate if raised by the', '            function, instead of being wrapped in
the CallInfo.', '        """', '        excinfo = None', '        start = timing.time()', '        precise_start = timing.perf_counter()',
'        try:', '>           result: TResult | None = func()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/runner.py', lineno=341, 
message=''), style='long'), ReprEntry(lines=['>       lambda: runtest_hook(item=item, **kwds), when=when, reraise=reraise', '    )'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/runner.py', lineno=242, 
message=''), style='long'), ReprEntry(lines=['    def __call__(self, **kwargs: object) -> Any:', '        """Call the hook.', '    ', '   
Only accepts keyword arguments, which should match the hook', '        specification.', '    ', '        Returns the result(s) of calling 
all registered plugins, see', '        :ref:`calling`.', '        """', '        assert (', '            not self.is_historic()', '       
), "Cannot directly call a historic hook - use call_historic instead."', '        self._verify_all_args_are_provided(kwargs)', '        
firstresult = self.spec.opts.get("firstresult", False) if self.spec else False', '        # Copy because plugins may register other 
plugins during iteration (#438).', '>       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_hooks.py', lineno=513, 
message=''), style='long'), ReprEntry(lines=['    def _hookexec(', '        self,', '        hook_name: str,', '        methods: 
Sequence[HookImpl],', '        kwargs: Mapping,', '        firstresult: bool,', '    ) -> object | list:', '        # called from all 
hookcaller instances.', '        # enable_tracing will set its own wrapping function at self._inner_hookexec', '>       return 
self._inner_hookexec(hook_name, methods, kwargs, firstresult)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_manager.py', lineno=120, 
message=''), style='long'), ReprEntry(lines=['    @pytest.hookimpl(wrapper=True, tryfirst=True)', '    def pytest_runtest_call() -> 
Generator[None]:', '>       yield from thread_exception_runtest_hook()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/threadexception.py', lineno=92, 
message=''), style='long'), ReprEntry(lines=['    def thread_exception_runtest_hook() -> Generator[None]:', '        with 
catch_threading_exception() as cm:', '            try:', '>               yield'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/threadexception.py', lineno=68, 
message=''), style='long'), ReprEntry(lines=['    @pytest.hookimpl(wrapper=True, tryfirst=True)', '    def pytest_runtest_call() -> 
Generator[None]:', '>       yield from unraisable_exception_runtest_hook()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/unraisableexception.py', 
lineno=95, message=''), style='long'), ReprEntry(lines=['    def unraisable_exception_runtest_hook() -> Generator[None]:', '        with 
catch_unraisable_exception() as cm:', '            try:', '>               yield'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/unraisableexception.py', 
lineno=70, message=''), style='long'), ReprEntry(lines=['    @hookimpl(wrapper=True)', '    def pytest_runtest_call(self, item: 
nodes.Item) -> Generator[None]:', '        self.log_cli_handler.set_when("call")', '    ', '>       yield from self._runtest_for(item, 
"call")'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/logging.py', lineno=846, 
message=''), style='long'), ReprEntry(lines=['    def _runtest_for(self, item: nodes.Item, when: str) -> Generator[None]:', '        
"""Implement the internals of the pytest_runtest_xxx() hooks."""', '        with catching_logs(', '            self.caplog_handler,', '   
level=self.log_level,', '        ) as caplog_handler, catching_logs(', '            self.report_handler,', '            
level=self.log_level,', '        ) as report_handler:', '            caplog_handler.reset()', '            report_handler.reset()', '     
item.stash = caplog_handler.records', '            item.stash = caplog_handler', '    ', '            try:', '>               yield'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/logging.py', lineno=829, 
message=''), style='long'), ReprEntry(lines=['    @hookimpl(wrapper=True)', '    def pytest_runtest_call(item: Item) -> Generator[None]:',
'        xfailed = item.stash.get(xfailed_key, None)', '        if xfailed is None:', '            item.stash = xfailed = 
evaluate_xfail_marks(item)', '    ', '        if xfailed and not item.config.option.runxfail and not xfailed.run:', '            
xfail("[NOTRUN] " + xfailed.reason)', '    ', '        try:', '>           return (yield)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/skipping.py', lineno=257, 
message=''), style='long'), ReprEntry(lines=['    def pytest_runtest_call(item: Item) -> None:', '        _update_current_test_var(item, 
"call")', '        try:', '            del sys.last_type', '            del sys.last_value', '            del sys.last_traceback', '      
if sys.version_info >= (3, 12, 0):', '                del sys.last_exc  # type:ignore', '        except AttributeError:', '            
pass', '        try:', '>           item.runtest()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/runner.py', lineno=174, 
message=''), style='long'), ReprEntry(lines=['    def runtest(self) -> None:', '        """Execute the underlying test function."""', '>  
self.ihook.pytest_pyfunc_call(pyfuncitem=self)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/python.py', lineno=1627, 
message=''), style='long'), ReprEntry(lines=['    def __call__(self, **kwargs: object) -> Any:', '        """Call the hook.', '    ', '   
Only accepts keyword arguments, which should match the hook', '        specification.', '    ', '        Returns the result(s) of calling 
all registered plugins, see', '        :ref:`calling`.', '        """', '        assert (', '            not self.is_historic()', '       
), "Cannot directly call a historic hook - use call_historic instead."', '        self._verify_all_args_are_provided(kwargs)', '        
firstresult = self.spec.opts.get("firstresult", False) if self.spec else False', '        # Copy because plugins may register other 
plugins during iteration (#438).', '>       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_hooks.py', lineno=513, 
message=''), style='long'), ReprEntry(lines=['    def _hookexec(', '        self,', '        hook_name: str,', '        methods: 
Sequence[HookImpl],', '        kwargs: Mapping,', '        firstresult: bool,', '    ) -> object | list:', '        # called from all 
hookcaller instances.', '        # enable_tracing will set its own wrapping function at self._inner_hookexec', '>       return 
self._inner_hookexec(hook_name, methods, kwargs, firstresult)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_manager.py', lineno=120, 
message=''), style='long'), ReprEntry(lines=['    @hookimpl(trylast=True)', '    def pytest_pyfunc_call(pyfuncitem: Function) -> object | 
None:', '        testfunction = pyfuncitem.obj', '        if is_async_function(testfunction):', '            
async_warn_and_skip(pyfuncitem.nodeid)', '        funcargs = pyfuncitem.funcargs', '        testargs = {arg: funcargs for arg in 
pyfuncitem._fixtureinfo.argnames}', '>       result = testfunction(**testargs)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/python.py', lineno=159, 
message=''), style='long'), ReprEntry(lines=['    def test_handles_linux_newline(self, wc):', '        r"""Handles the Linux newline 
(\\n)"""', '>       assert_equals_if(b"1 2 7\\n", wc(stdin=b"hot\\ntea"))'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='tests/task_02.py', lineno=28, message=''), style='long'), ReprEntry(lines=['    def 
assert_equals_if(expected, actual, message=None):', '        """Only show the expected vs. actual table on a truthy value."""', '        
if bool(actual):', '            assert_equals(expected, actual, message)', '        else:', '            if message:', '                
assert expected == actual, message', '            else:', '>               assert expected == actual', "E               AssertionError: 
assert b'1 2 7\\n' == b''", 'E                 ', 'E                 Use -v to get more diff'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='tests/realpython/assertions.py', lineno=17, message='AssertionError'), style='long')], extraline=None, 
style='long'), ReprFileLocation(path='/home/bartek/Git/materials-forked/wordcount/tests/realpython/assertions.py', lineno=17, 
message="AssertionError: assert b'1 2 7\\n' == b''\n  \n  Use -v to get more diff"), None)])

XXX
ExceptionChainRepr(reprtraceback=ReprTraceback(reprentries=[ReprEntry(lines=['    @classmethod', '    def from_call(', '        cls,', '  
func: Callable[[], TResult],', '        when: Literal["collect", "setup", "call", "teardown"],', '        reraise: type[BaseException] | 
tuple[type[BaseException], ...] | None = None,', '    ) -> CallInfo[TResult]:', '        """Call func, wrapping the result in a 
CallInfo.', '    ', '        :param func:', '            The function to call. Called without arguments.', '        :type func: 
Callable[[], _pytest.runner.TResult]', '        :param when:', '            The phase in which the function is called.', '        :param 
reraise:', '            Exception or exceptions that shall propagate if raised by the', '            function, instead of being wrapped in
the CallInfo.', '        """', '        excinfo = None', '        start = timing.time()', '        precise_start = timing.perf_counter()',
'        try:', '>           result: TResult | None = func()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/runner.py', lineno=341, 
message=''), style='long'), ReprEntry(lines=['>       lambda: runtest_hook(item=item, **kwds), when=when, reraise=reraise', '    )'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/runner.py', lineno=242, 
message=''), style='long'), ReprEntry(lines=['    def __call__(self, **kwargs: object) -> Any:', '        """Call the hook.', '    ', '   
Only accepts keyword arguments, which should match the hook', '        specification.', '    ', '        Returns the result(s) of calling 
all registered plugins, see', '        :ref:`calling`.', '        """', '        assert (', '            not self.is_historic()', '       
), "Cannot directly call a historic hook - use call_historic instead."', '        self._verify_all_args_are_provided(kwargs)', '        
firstresult = self.spec.opts.get("firstresult", False) if self.spec else False', '        # Copy because plugins may register other 
plugins during iteration (#438).', '>       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_hooks.py', lineno=513, 
message=''), style='long'), ReprEntry(lines=['    def _hookexec(', '        self,', '        hook_name: str,', '        methods: 
Sequence[HookImpl],', '        kwargs: Mapping,', '        firstresult: bool,', '    ) -> object | list:', '        # called from all 
hookcaller instances.', '        # enable_tracing will set its own wrapping function at self._inner_hookexec', '>       return 
self._inner_hookexec(hook_name, methods, kwargs, firstresult)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_manager.py', lineno=120, 
message=''), style='long'), ReprEntry(lines=['    @pytest.hookimpl(wrapper=True, tryfirst=True)', '    def pytest_runtest_call() -> 
Generator[None]:', '>       yield from thread_exception_runtest_hook()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/threadexception.py', lineno=92, 
message=''), style='long'), ReprEntry(lines=['    def thread_exception_runtest_hook() -> Generator[None]:', '        with 
catch_threading_exception() as cm:', '            try:', '>               yield'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/threadexception.py', lineno=68, 
message=''), style='long'), ReprEntry(lines=['    @pytest.hookimpl(wrapper=True, tryfirst=True)', '    def pytest_runtest_call() -> 
Generator[None]:', '>       yield from unraisable_exception_runtest_hook()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/unraisableexception.py', 
lineno=95, message=''), style='long'), ReprEntry(lines=['    def unraisable_exception_runtest_hook() -> Generator[None]:', '        with 
catch_unraisable_exception() as cm:', '            try:', '>               yield'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/unraisableexception.py', 
lineno=70, message=''), style='long'), ReprEntry(lines=['    @hookimpl(wrapper=True)', '    def pytest_runtest_call(self, item: 
nodes.Item) -> Generator[None]:', '        self.log_cli_handler.set_when("call")', '    ', '>       yield from self._runtest_for(item, 
"call")'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/logging.py', lineno=846, 
message=''), style='long'), ReprEntry(lines=['    def _runtest_for(self, item: nodes.Item, when: str) -> Generator[None]:', '        
"""Implement the internals of the pytest_runtest_xxx() hooks."""', '        with catching_logs(', '            self.caplog_handler,', '   
level=self.log_level,', '        ) as caplog_handler, catching_logs(', '            self.report_handler,', '            
level=self.log_level,', '        ) as report_handler:', '            caplog_handler.reset()', '            report_handler.reset()', '     
item.stash = caplog_handler.records', '            item.stash = caplog_handler', '    ', '            try:', '>               yield'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/logging.py', lineno=829, 
message=''), style='long'), ReprEntry(lines=['    @hookimpl(wrapper=True)', '    def pytest_runtest_call(item: Item) -> Generator[None]:',
'        xfailed = item.stash.get(xfailed_key, None)', '        if xfailed is None:', '            item.stash = xfailed = 
evaluate_xfail_marks(item)', '    ', '        if xfailed and not item.config.option.runxfail and not xfailed.run:', '            
xfail("[NOTRUN] " + xfailed.reason)', '    ', '        try:', '>           return (yield)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/skipping.py', lineno=257, 
message=''), style='long'), ReprEntry(lines=['    def pytest_runtest_call(item: Item) -> None:', '        _update_current_test_var(item, 
"call")', '        try:', '            del sys.last_type', '            del sys.last_value', '            del sys.last_traceback', '      
if sys.version_info >= (3, 12, 0):', '                del sys.last_exc  # type:ignore', '        except AttributeError:', '            
pass', '        try:', '>           item.runtest()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/runner.py', lineno=174, 
message=''), style='long'), ReprEntry(lines=['    def runtest(self) -> None:', '        """Execute the underlying test function."""', '>  
self.ihook.pytest_pyfunc_call(pyfuncitem=self)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/python.py', lineno=1627, 
message=''), style='long'), ReprEntry(lines=['    def __call__(self, **kwargs: object) -> Any:', '        """Call the hook.', '    ', '   
Only accepts keyword arguments, which should match the hook', '        specification.', '    ', '        Returns the result(s) of calling 
all registered plugins, see', '        :ref:`calling`.', '        """', '        assert (', '            not self.is_historic()', '       
), "Cannot directly call a historic hook - use call_historic instead."', '        self._verify_all_args_are_provided(kwargs)', '        
firstresult = self.spec.opts.get("firstresult", False) if self.spec else False', '        # Copy because plugins may register other 
plugins during iteration (#438).', '>       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_hooks.py', lineno=513, 
message=''), style='long'), ReprEntry(lines=['    def _hookexec(', '        self,', '        hook_name: str,', '        methods: 
Sequence[HookImpl],', '        kwargs: Mapping,', '        firstresult: bool,', '    ) -> object | list:', '        # called from all 
hookcaller instances.', '        # enable_tracing will set its own wrapping function at self._inner_hookexec', '>       return 
self._inner_hookexec(hook_name, methods, kwargs, firstresult)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_manager.py', lineno=120, 
message=''), style='long'), ReprEntry(lines=['    @hookimpl(trylast=True)', '    def pytest_pyfunc_call(pyfuncitem: Function) -> object | 
None:', '        testfunction = pyfuncitem.obj', '        if is_async_function(testfunction):', '            
async_warn_and_skip(pyfuncitem.nodeid)', '        funcargs = pyfuncitem.funcargs', '        testargs = {arg: funcargs for arg in 
pyfuncitem._fixtureinfo.argnames}', '>       result = testfunction(**testargs)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/python.py', lineno=159, 
message=''), style='long'), ReprEntry(lines=['    def test_handles_macos_newline(self, wc):', '        r"""Handles the macOS newline 
(\\r)"""', '>       assert_equals_if(b"0 2 7\\n", wc(stdin=b"hot\\rtea"))'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='tests/task_02.py', lineno=32, message=''), style='long'), ReprEntry(lines=['    def 
assert_equals_if(expected, actual, message=None):', '        """Only show the expected vs. actual table on a truthy value."""', '        
if bool(actual):', '            assert_equals(expected, actual, message)', '        else:', '            if message:', '                
assert expected == actual, message', '            else:', '>               assert expected == actual', "E               AssertionError: 
assert b'0 2 7\\n' == b''", 'E                 ', 'E                 Use -v to get more diff'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='tests/realpython/assertions.py', lineno=17, message='AssertionError'), style='long')], extraline=None, 
style='long'), reprcrash=ReprFileLocation(path='/home/bartek/Git/materials-forked/wordcount/tests/realpython/assertions.py', lineno=17, 
message="AssertionError: assert b'0 2 7\\n' == b''\n  \n  Use -v to get more diff"), sections=[], 
chain=[(ReprTraceback(reprentries=[ReprEntry(lines=['    @classmethod', '    def from_call(', '        cls,', '        func: Callable[[], 
TResult],', '        when: Literal["collect", "setup", "call", "teardown"],', '        reraise: type[BaseException] | 
tuple[type[BaseException], ...] | None = None,', '    ) -> CallInfo[TResult]:', '        """Call func, wrapping the result in a 
CallInfo.', '    ', '        :param func:', '            The function to call. Called without arguments.', '        :type func: 
Callable[[], _pytest.runner.TResult]', '        :param when:', '            The phase in which the function is called.', '        :param 
reraise:', '            Exception or exceptions that shall propagate if raised by the', '            function, instead of being wrapped in
the CallInfo.', '        """', '        excinfo = None', '        start = timing.time()', '        precise_start = timing.perf_counter()',
'        try:', '>           result: TResult | None = func()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/runner.py', lineno=341, 
message=''), style='long'), ReprEntry(lines=['>       lambda: runtest_hook(item=item, **kwds), when=when, reraise=reraise', '    )'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/runner.py', lineno=242, 
message=''), style='long'), ReprEntry(lines=['    def __call__(self, **kwargs: object) -> Any:', '        """Call the hook.', '    ', '   
Only accepts keyword arguments, which should match the hook', '        specification.', '    ', '        Returns the result(s) of calling 
all registered plugins, see', '        :ref:`calling`.', '        """', '        assert (', '            not self.is_historic()', '       
), "Cannot directly call a historic hook - use call_historic instead."', '        self._verify_all_args_are_provided(kwargs)', '        
firstresult = self.spec.opts.get("firstresult", False) if self.spec else False', '        # Copy because plugins may register other 
plugins during iteration (#438).', '>       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_hooks.py', lineno=513, 
message=''), style='long'), ReprEntry(lines=['    def _hookexec(', '        self,', '        hook_name: str,', '        methods: 
Sequence[HookImpl],', '        kwargs: Mapping,', '        firstresult: bool,', '    ) -> object | list:', '        # called from all 
hookcaller instances.', '        # enable_tracing will set its own wrapping function at self._inner_hookexec', '>       return 
self._inner_hookexec(hook_name, methods, kwargs, firstresult)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_manager.py', lineno=120, 
message=''), style='long'), ReprEntry(lines=['    @pytest.hookimpl(wrapper=True, tryfirst=True)', '    def pytest_runtest_call() -> 
Generator[None]:', '>       yield from thread_exception_runtest_hook()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/threadexception.py', lineno=92, 
message=''), style='long'), ReprEntry(lines=['    def thread_exception_runtest_hook() -> Generator[None]:', '        with 
catch_threading_exception() as cm:', '            try:', '>               yield'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/threadexception.py', lineno=68, 
message=''), style='long'), ReprEntry(lines=['    @pytest.hookimpl(wrapper=True, tryfirst=True)', '    def pytest_runtest_call() -> 
Generator[None]:', '>       yield from unraisable_exception_runtest_hook()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/unraisableexception.py', 
lineno=95, message=''), style='long'), ReprEntry(lines=['    def unraisable_exception_runtest_hook() -> Generator[None]:', '        with 
catch_unraisable_exception() as cm:', '            try:', '>               yield'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/unraisableexception.py', 
lineno=70, message=''), style='long'), ReprEntry(lines=['    @hookimpl(wrapper=True)', '    def pytest_runtest_call(self, item: 
nodes.Item) -> Generator[None]:', '        self.log_cli_handler.set_when("call")', '    ', '>       yield from self._runtest_for(item, 
"call")'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/logging.py', lineno=846, 
message=''), style='long'), ReprEntry(lines=['    def _runtest_for(self, item: nodes.Item, when: str) -> Generator[None]:', '        
"""Implement the internals of the pytest_runtest_xxx() hooks."""', '        with catching_logs(', '            self.caplog_handler,', '   
level=self.log_level,', '        ) as caplog_handler, catching_logs(', '            self.report_handler,', '            
level=self.log_level,', '        ) as report_handler:', '            caplog_handler.reset()', '            report_handler.reset()', '     
item.stash = caplog_handler.records', '            item.stash = caplog_handler', '    ', '            try:', '>               yield'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/logging.py', lineno=829, 
message=''), style='long'), ReprEntry(lines=['    @hookimpl(wrapper=True)', '    def pytest_runtest_call(item: Item) -> Generator[None]:',
'        xfailed = item.stash.get(xfailed_key, None)', '        if xfailed is None:', '            item.stash = xfailed = 
evaluate_xfail_marks(item)', '    ', '        if xfailed and not item.config.option.runxfail and not xfailed.run:', '            
xfail("[NOTRUN] " + xfailed.reason)', '    ', '        try:', '>           return (yield)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/skipping.py', lineno=257, 
message=''), style='long'), ReprEntry(lines=['    def pytest_runtest_call(item: Item) -> None:', '        _update_current_test_var(item, 
"call")', '        try:', '            del sys.last_type', '            del sys.last_value', '            del sys.last_traceback', '      
if sys.version_info >= (3, 12, 0):', '                del sys.last_exc  # type:ignore', '        except AttributeError:', '            
pass', '        try:', '>           item.runtest()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/runner.py', lineno=174, 
message=''), style='long'), ReprEntry(lines=['    def runtest(self) -> None:', '        """Execute the underlying test function."""', '>  
self.ihook.pytest_pyfunc_call(pyfuncitem=self)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/python.py', lineno=1627, 
message=''), style='long'), ReprEntry(lines=['    def __call__(self, **kwargs: object) -> Any:', '        """Call the hook.', '    ', '   
Only accepts keyword arguments, which should match the hook', '        specification.', '    ', '        Returns the result(s) of calling 
all registered plugins, see', '        :ref:`calling`.', '        """', '        assert (', '            not self.is_historic()', '       
), "Cannot directly call a historic hook - use call_historic instead."', '        self._verify_all_args_are_provided(kwargs)', '        
firstresult = self.spec.opts.get("firstresult", False) if self.spec else False', '        # Copy because plugins may register other 
plugins during iteration (#438).', '>       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_hooks.py', lineno=513, 
message=''), style='long'), ReprEntry(lines=['    def _hookexec(', '        self,', '        hook_name: str,', '        methods: 
Sequence[HookImpl],', '        kwargs: Mapping,', '        firstresult: bool,', '    ) -> object | list:', '        # called from all 
hookcaller instances.', '        # enable_tracing will set its own wrapping function at self._inner_hookexec', '>       return 
self._inner_hookexec(hook_name, methods, kwargs, firstresult)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_manager.py', lineno=120, 
message=''), style='long'), ReprEntry(lines=['    @hookimpl(trylast=True)', '    def pytest_pyfunc_call(pyfuncitem: Function) -> object | 
None:', '        testfunction = pyfuncitem.obj', '        if is_async_function(testfunction):', '            
async_warn_and_skip(pyfuncitem.nodeid)', '        funcargs = pyfuncitem.funcargs', '        testargs = {arg: funcargs for arg in 
pyfuncitem._fixtureinfo.argnames}', '>       result = testfunction(**testargs)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/python.py', lineno=159, 
message=''), style='long'), ReprEntry(lines=['    def test_handles_macos_newline(self, wc):', '        r"""Handles the macOS newline 
(\\r)"""', '>       assert_equals_if(b"0 2 7\\n", wc(stdin=b"hot\\rtea"))'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='tests/task_02.py', lineno=32, message=''), style='long'), ReprEntry(lines=['    def 
assert_equals_if(expected, actual, message=None):', '        """Only show the expected vs. actual table on a truthy value."""', '        
if bool(actual):', '            assert_equals(expected, actual, message)', '        else:', '            if message:', '                
assert expected == actual, message', '            else:', '>               assert expected == actual', "E               AssertionError: 
assert b'0 2 7\\n' == b''", 'E                 ', 'E                 Use -v to get more diff'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='tests/realpython/assertions.py', lineno=17, message='AssertionError'), style='long')], extraline=None, 
style='long'), ReprFileLocation(path='/home/bartek/Git/materials-forked/wordcount/tests/realpython/assertions.py', lineno=17, 
message="AssertionError: assert b'0 2 7\\n' == b''\n  \n  Use -v to get more diff"), None)])

XXX
ExceptionChainRepr(reprtraceback=ReprTraceback(reprentries=[ReprEntry(lines=['    @classmethod', '    def from_call(', '        cls,', '  
func: Callable[[], TResult],', '        when: Literal["collect", "setup", "call", "teardown"],', '        reraise: type[BaseException] | 
tuple[type[BaseException], ...] | None = None,', '    ) -> CallInfo[TResult]:', '        """Call func, wrapping the result in a 
CallInfo.', '    ', '        :param func:', '            The function to call. Called without arguments.', '        :type func: 
Callable[[], _pytest.runner.TResult]', '        :param when:', '            The phase in which the function is called.', '        :param 
reraise:', '            Exception or exceptions that shall propagate if raised by the', '            function, instead of being wrapped in
the CallInfo.', '        """', '        excinfo = None', '        start = timing.time()', '        precise_start = timing.perf_counter()',
'        try:', '>           result: TResult | None = func()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/runner.py', lineno=341, 
message=''), style='long'), ReprEntry(lines=['>       lambda: runtest_hook(item=item, **kwds), when=when, reraise=reraise', '    )'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/runner.py', lineno=242, 
message=''), style='long'), ReprEntry(lines=['    def __call__(self, **kwargs: object) -> Any:', '        """Call the hook.', '    ', '   
Only accepts keyword arguments, which should match the hook', '        specification.', '    ', '        Returns the result(s) of calling 
all registered plugins, see', '        :ref:`calling`.', '        """', '        assert (', '            not self.is_historic()', '       
), "Cannot directly call a historic hook - use call_historic instead."', '        self._verify_all_args_are_provided(kwargs)', '        
firstresult = self.spec.opts.get("firstresult", False) if self.spec else False', '        # Copy because plugins may register other 
plugins during iteration (#438).', '>       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_hooks.py', lineno=513, 
message=''), style='long'), ReprEntry(lines=['    def _hookexec(', '        self,', '        hook_name: str,', '        methods: 
Sequence[HookImpl],', '        kwargs: Mapping,', '        firstresult: bool,', '    ) -> object | list:', '        # called from all 
hookcaller instances.', '        # enable_tracing will set its own wrapping function at self._inner_hookexec', '>       return 
self._inner_hookexec(hook_name, methods, kwargs, firstresult)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_manager.py', lineno=120, 
message=''), style='long'), ReprEntry(lines=['    @pytest.hookimpl(wrapper=True, tryfirst=True)', '    def pytest_runtest_call() -> 
Generator[None]:', '>       yield from thread_exception_runtest_hook()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/threadexception.py', lineno=92, 
message=''), style='long'), ReprEntry(lines=['    def thread_exception_runtest_hook() -> Generator[None]:', '        with 
catch_threading_exception() as cm:', '            try:', '>               yield'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/threadexception.py', lineno=68, 
message=''), style='long'), ReprEntry(lines=['    @pytest.hookimpl(wrapper=True, tryfirst=True)', '    def pytest_runtest_call() -> 
Generator[None]:', '>       yield from unraisable_exception_runtest_hook()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/unraisableexception.py', 
lineno=95, message=''), style='long'), ReprEntry(lines=['    def unraisable_exception_runtest_hook() -> Generator[None]:', '        with 
catch_unraisable_exception() as cm:', '            try:', '>               yield'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/unraisableexception.py', 
lineno=70, message=''), style='long'), ReprEntry(lines=['    @hookimpl(wrapper=True)', '    def pytest_runtest_call(self, item: 
nodes.Item) -> Generator[None]:', '        self.log_cli_handler.set_when("call")', '    ', '>       yield from self._runtest_for(item, 
"call")'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/logging.py', lineno=846, 
message=''), style='long'), ReprEntry(lines=['    def _runtest_for(self, item: nodes.Item, when: str) -> Generator[None]:', '        
"""Implement the internals of the pytest_runtest_xxx() hooks."""', '        with catching_logs(', '            self.caplog_handler,', '   
level=self.log_level,', '        ) as caplog_handler, catching_logs(', '            self.report_handler,', '            
level=self.log_level,', '        ) as report_handler:', '            caplog_handler.reset()', '            report_handler.reset()', '     
item.stash = caplog_handler.records', '            item.stash = caplog_handler', '    ', '            try:', '>               yield'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/logging.py', lineno=829, 
message=''), style='long'), ReprEntry(lines=['    @hookimpl(wrapper=True)', '    def pytest_runtest_call(item: Item) -> Generator[None]:',
'        xfailed = item.stash.get(xfailed_key, None)', '        if xfailed is None:', '            item.stash = xfailed = 
evaluate_xfail_marks(item)', '    ', '        if xfailed and not item.config.option.runxfail and not xfailed.run:', '            
xfail("[NOTRUN] " + xfailed.reason)', '    ', '        try:', '>           return (yield)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/skipping.py', lineno=257, 
message=''), style='long'), ReprEntry(lines=['    def pytest_runtest_call(item: Item) -> None:', '        _update_current_test_var(item, 
"call")', '        try:', '            del sys.last_type', '            del sys.last_value', '            del sys.last_traceback', '      
if sys.version_info >= (3, 12, 0):', '                del sys.last_exc  # type:ignore', '        except AttributeError:', '            
pass', '        try:', '>           item.runtest()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/runner.py', lineno=174, 
message=''), style='long'), ReprEntry(lines=['    def runtest(self) -> None:', '        """Execute the underlying test function."""', '>  
self.ihook.pytest_pyfunc_call(pyfuncitem=self)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/python.py', lineno=1627, 
message=''), style='long'), ReprEntry(lines=['    def __call__(self, **kwargs: object) -> Any:', '        """Call the hook.', '    ', '   
Only accepts keyword arguments, which should match the hook', '        specification.', '    ', '        Returns the result(s) of calling 
all registered plugins, see', '        :ref:`calling`.', '        """', '        assert (', '            not self.is_historic()', '       
), "Cannot directly call a historic hook - use call_historic instead."', '        self._verify_all_args_are_provided(kwargs)', '        
firstresult = self.spec.opts.get("firstresult", False) if self.spec else False', '        # Copy because plugins may register other 
plugins during iteration (#438).', '>       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_hooks.py', lineno=513, 
message=''), style='long'), ReprEntry(lines=['    def _hookexec(', '        self,', '        hook_name: str,', '        methods: 
Sequence[HookImpl],', '        kwargs: Mapping,', '        firstresult: bool,', '    ) -> object | list:', '        # called from all 
hookcaller instances.', '        # enable_tracing will set its own wrapping function at self._inner_hookexec', '>       return 
self._inner_hookexec(hook_name, methods, kwargs, firstresult)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_manager.py', lineno=120, 
message=''), style='long'), ReprEntry(lines=['    @hookimpl(trylast=True)', '    def pytest_pyfunc_call(pyfuncitem: Function) -> object | 
None:', '        testfunction = pyfuncitem.obj', '        if is_async_function(testfunction):', '            
async_warn_and_skip(pyfuncitem.nodeid)', '        funcargs = pyfuncitem.funcargs', '        testargs = {arg: funcargs for arg in 
pyfuncitem._fixtureinfo.argnames}', '>       result = testfunction(**testargs)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/python.py', lineno=159, 
message=''), style='long'), ReprEntry(lines=['    def test_handles_windows_newline(self, wc):', '        r"""Handles the Windows newline 
(\\r\\n)"""', '>       assert_equals_if(b"1 2 8\\n", wc(stdin=b"hot\\r\\ntea"))'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='tests/task_02.py', lineno=36, message=''), style='long'), ReprEntry(lines=['    def 
assert_equals_if(expected, actual, message=None):', '        """Only show the expected vs. actual table on a truthy value."""', '        
if bool(actual):', '            assert_equals(expected, actual, message)', '        else:', '            if message:', '                
assert expected == actual, message', '            else:', '>               assert expected == actual', "E               AssertionError: 
assert b'1 2 8\\n' == b''", 'E                 ', 'E                 Use -v to get more diff'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='tests/realpython/assertions.py', lineno=17, message='AssertionError'), style='long')], extraline=None, 
style='long'), reprcrash=ReprFileLocation(path='/home/bartek/Git/materials-forked/wordcount/tests/realpython/assertions.py', lineno=17, 
message="AssertionError: assert b'1 2 8\\n' == b''\n  \n  Use -v to get more diff"), sections=[], 
chain=[(ReprTraceback(reprentries=[ReprEntry(lines=['    @classmethod', '    def from_call(', '        cls,', '        func: Callable[[], 
TResult],', '        when: Literal["collect", "setup", "call", "teardown"],', '        reraise: type[BaseException] | 
tuple[type[BaseException], ...] | None = None,', '    ) -> CallInfo[TResult]:', '        """Call func, wrapping the result in a 
CallInfo.', '    ', '        :param func:', '            The function to call. Called without arguments.', '        :type func: 
Callable[[], _pytest.runner.TResult]', '        :param when:', '            The phase in which the function is called.', '        :param 
reraise:', '            Exception or exceptions that shall propagate if raised by the', '            function, instead of being wrapped in
the CallInfo.', '        """', '        excinfo = None', '        start = timing.time()', '        precise_start = timing.perf_counter()',
'        try:', '>           result: TResult | None = func()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/runner.py', lineno=341, 
message=''), style='long'), ReprEntry(lines=['>       lambda: runtest_hook(item=item, **kwds), when=when, reraise=reraise', '    )'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/runner.py', lineno=242, 
message=''), style='long'), ReprEntry(lines=['    def __call__(self, **kwargs: object) -> Any:', '        """Call the hook.', '    ', '   
Only accepts keyword arguments, which should match the hook', '        specification.', '    ', '        Returns the result(s) of calling 
all registered plugins, see', '        :ref:`calling`.', '        """', '        assert (', '            not self.is_historic()', '       
), "Cannot directly call a historic hook - use call_historic instead."', '        self._verify_all_args_are_provided(kwargs)', '        
firstresult = self.spec.opts.get("firstresult", False) if self.spec else False', '        # Copy because plugins may register other 
plugins during iteration (#438).', '>       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_hooks.py', lineno=513, 
message=''), style='long'), ReprEntry(lines=['    def _hookexec(', '        self,', '        hook_name: str,', '        methods: 
Sequence[HookImpl],', '        kwargs: Mapping,', '        firstresult: bool,', '    ) -> object | list:', '        # called from all 
hookcaller instances.', '        # enable_tracing will set its own wrapping function at self._inner_hookexec', '>       return 
self._inner_hookexec(hook_name, methods, kwargs, firstresult)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_manager.py', lineno=120, 
message=''), style='long'), ReprEntry(lines=['    @pytest.hookimpl(wrapper=True, tryfirst=True)', '    def pytest_runtest_call() -> 
Generator[None]:', '>       yield from thread_exception_runtest_hook()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/threadexception.py', lineno=92, 
message=''), style='long'), ReprEntry(lines=['    def thread_exception_runtest_hook() -> Generator[None]:', '        with 
catch_threading_exception() as cm:', '            try:', '>               yield'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/threadexception.py', lineno=68, 
message=''), style='long'), ReprEntry(lines=['    @pytest.hookimpl(wrapper=True, tryfirst=True)', '    def pytest_runtest_call() -> 
Generator[None]:', '>       yield from unraisable_exception_runtest_hook()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/unraisableexception.py', 
lineno=95, message=''), style='long'), ReprEntry(lines=['    def unraisable_exception_runtest_hook() -> Generator[None]:', '        with 
catch_unraisable_exception() as cm:', '            try:', '>               yield'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/unraisableexception.py', 
lineno=70, message=''), style='long'), ReprEntry(lines=['    @hookimpl(wrapper=True)', '    def pytest_runtest_call(self, item: 
nodes.Item) -> Generator[None]:', '        self.log_cli_handler.set_when("call")', '    ', '>       yield from self._runtest_for(item, 
"call")'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/logging.py', lineno=846, 
message=''), style='long'), ReprEntry(lines=['    def _runtest_for(self, item: nodes.Item, when: str) -> Generator[None]:', '        
"""Implement the internals of the pytest_runtest_xxx() hooks."""', '        with catching_logs(', '            self.caplog_handler,', '   
level=self.log_level,', '        ) as caplog_handler, catching_logs(', '            self.report_handler,', '            
level=self.log_level,', '        ) as report_handler:', '            caplog_handler.reset()', '            report_handler.reset()', '     
item.stash = caplog_handler.records', '            item.stash = caplog_handler', '    ', '            try:', '>               yield'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/logging.py', lineno=829, 
message=''), style='long'), ReprEntry(lines=['    @hookimpl(wrapper=True)', '    def pytest_runtest_call(item: Item) -> Generator[None]:',
'        xfailed = item.stash.get(xfailed_key, None)', '        if xfailed is None:', '            item.stash = xfailed = 
evaluate_xfail_marks(item)', '    ', '        if xfailed and not item.config.option.runxfail and not xfailed.run:', '            
xfail("[NOTRUN] " + xfailed.reason)', '    ', '        try:', '>           return (yield)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/skipping.py', lineno=257, 
message=''), style='long'), ReprEntry(lines=['    def pytest_runtest_call(item: Item) -> None:', '        _update_current_test_var(item, 
"call")', '        try:', '            del sys.last_type', '            del sys.last_value', '            del sys.last_traceback', '      
if sys.version_info >= (3, 12, 0):', '                del sys.last_exc  # type:ignore', '        except AttributeError:', '            
pass', '        try:', '>           item.runtest()'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/runner.py', lineno=174, 
message=''), style='long'), ReprEntry(lines=['    def runtest(self) -> None:', '        """Execute the underlying test function."""', '>  
self.ihook.pytest_pyfunc_call(pyfuncitem=self)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/python.py', lineno=1627, 
message=''), style='long'), ReprEntry(lines=['    def __call__(self, **kwargs: object) -> Any:', '        """Call the hook.', '    ', '   
Only accepts keyword arguments, which should match the hook', '        specification.', '    ', '        Returns the result(s) of calling 
all registered plugins, see', '        :ref:`calling`.', '        """', '        assert (', '            not self.is_historic()', '       
), "Cannot directly call a historic hook - use call_historic instead."', '        self._verify_all_args_are_provided(kwargs)', '        
firstresult = self.spec.opts.get("firstresult", False) if self.spec else False', '        # Copy because plugins may register other 
plugins during iteration (#438).', '>       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)'], 
reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_hooks.py', lineno=513, 
message=''), style='long'), ReprEntry(lines=['    def _hookexec(', '        self,', '        hook_name: str,', '        methods: 
Sequence[HookImpl],', '        kwargs: Mapping,', '        firstresult: bool,', '    ) -> object | list:', '        # called from all 
hookcaller instances.', '        # enable_tracing will set its own wrapping function at self._inner_hookexec', '>       return 
self._inner_hookexec(hook_name, methods, kwargs, firstresult)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/pluggy/_manager.py', lineno=120, 
message=''), style='long'), ReprEntry(lines=['    @hookimpl(trylast=True)', '    def pytest_pyfunc_call(pyfuncitem: Function) -> object | 
None:', '        testfunction = pyfuncitem.obj', '        if is_async_function(testfunction):', '            
async_warn_and_skip(pyfuncitem.nodeid)', '        funcargs = pyfuncitem.funcargs', '        testargs = {arg: funcargs for arg in 
pyfuncitem._fixtureinfo.argnames}', '>       result = testfunction(**testargs)'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='../../../.virtualenvs/wordcount/lib/python3.12/site-packages/_pytest/python.py', lineno=159, 
message=''), style='long'), ReprEntry(lines=['    def test_handles_windows_newline(self, wc):', '        r"""Handles the Windows newline 
(\\r\\n)"""', '>       assert_equals_if(b"1 2 8\\n", wc(stdin=b"hot\\r\\ntea"))'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='tests/task_02.py', lineno=36, message=''), style='long'), ReprEntry(lines=['    def 
assert_equals_if(expected, actual, message=None):', '        """Only show the expected vs. actual table on a truthy value."""', '        
if bool(actual):', '            assert_equals(expected, actual, message)', '        else:', '            if message:', '                
assert expected == actual, message', '            else:', '>               assert expected == actual', "E               AssertionError: 
assert b'1 2 8\\n' == b''", 'E                 ', 'E                 Use -v to get more diff'], reprfuncargs=None, reprlocals=None, 
reprfileloc=ReprFileLocation(path='tests/realpython/assertions.py', lineno=17, message='AssertionError'), style='long')], extraline=None, 
style='long'), ReprFileLocation(path='/home/bartek/Git/materials-forked/wordcount/tests/realpython/assertions.py', lineno=17, 
message="AssertionError: assert b'1 2 8\\n' == b''\n  \n  Use -v to get more diff"), None)])

